#Find all the groups a user is in
Get-ADPrincipalGroupMembership <username> | select name

#Check if user is locked out
get-aduser <username> -Properties * | Select-Object LockedOut

#Check if user is enabled
 get-aduser <username> | select samaccountname,enabled

#Change Password
Set-AdAccountPassword -Identity <username> -OldPassword (Read-Host -asSecureString "Enter the current password") -NewPassword (Read-Host -asSecureString "Enter the new password")

#Find all running services on a server
Get-Service -ComputerName <server> | Where-Object {$_.Status -eq "Running"}

#Check the size of a folder local
"{0} MB" -f ((Get-ChildItem <Folder> -Recurse | Measure-Object -Property Length -Sum -ErrorAction Stop).Sum / 1MB)

#Check Disk Usage remote
Invoke-Command -ComputerName <ComputerName> {Get-PSDrive -PSProvider FileSystem }  | Select-Object root,@{Name="Used (GB)"; Expression={[math]::Round($_.used / 1GB,2)}},@{Name="Free (GB)"; Expression={[math]::Round($_.Free / 1GB,2)}} | Format-Table

#Find Uptime on a remote server
$computer = "<computerName>"
(Get-Date) - [Management.ManagementDateTimeConverter]::ToDateTime((Get-WmiObject Win32_OperatingSystem -ComputerName $computer).LastBootUpTime) | Format-Table

#Check File Shares on a remote server
$cim = New-CimSession -ComputerName <computerName>
Get-SmbShare -CimSession $cim

#Search for users
get-aduser -f {name -like '<id>'} -Properties * | Select-Object name,whenCreated 

#Create multiple folders
 1..5 | foreach {MD ".\Client$_\Inbox"}
 
 #Find all shares
 Get-SmbShare | select name,path | Format-Table 
 
 #Find current logged in user
 $env:UserName
 
 #Find logged in sessions on remote Server
 Invoke-Command -Computername <Server> -ScriptBlock { quser }

#Close session on remote server
 Invoke-Command -Computername <Server> -ScriptBlock { logoff <SessionNumber> }
 
#Find the version of powershell running on local
Get-Host | Select-Object Version

#Check Uptime on local PC
(get-date) - (gcim Win32_OperatingSystem).LastBootUpTime

#Check open ports on local 
get-nettcpconnection | select local*,remote*,state,@{Name="Process";Expression={(Get-Process -Id $_.OwningProcess).ProcessName}} | sort LocalPort | Format-Table -AutoSize

#Count the number of files in a local directory
#Recursive
(Get-ChildItem -Recurse -file | Measure-Object).Count
#Single Level
(Get-ChildItem | Measure-Object).Count


#Check if IIS is installed
$IIS = Get-WindowsOptionalFeature -Online -FeatureName “IIS-WebServer”
if ($IIS.State -eq "Disabled") { 
    Enable-WindowsOptionalFeature -FeatureName $IIS.FeatureName -Online
}
